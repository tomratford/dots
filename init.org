#+TITLE: Tom's Emacs Config
#+AUTHOR: Tom Ratford
#+PROPERTY: header-args :comments link :tangle ~/.emacs.d/init.el :tangle-mode (identity #o444)
#+STARTUP: overview

:TODO: Replace ~:config~ instances with ~:custom~ and ~:custom-faces~

* Basic Settings

These are the basic settings which I want active for all of my emacs. Firstly we obviously need MELPA and use-package. 

#+begin_src elisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

  (package-initialize)
#+end_src
  
Now we bootstrap `use-package` and load it. `use-package-always-ensure t` Ensures we always have every package installed when we load it.
  
#+begin_src elisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))

  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src

Now we can dance.

** Customfile
   
Not a fan of customise variable, it clogs up and makes your init.el look awful.
let it be gone (or hidden).
Whilst we're here lets just make themes safe (I only load 2 anyways)

#+begin_src elisp
  (setq custom-file "~/.emacs.d/custom.el")
  (setq custom-safe-themes t)
#+end_src
   
** Autosaving

Lets put backups and auto-saves somewhere smart.

#+begin_src elisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+end_src
  
** Yes, no, maybe?

I think y/n will suffice

#+begin_src elisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Delete selection upon type

Ensures sanity

#+begin_src elisp
  (delete-selection-mode)
#+end_src

** Startup messages

I'm going to replace the startup screens with =dashboard.el,= so this is irrelevant

#+begin_src elisp
  (setq ihibit-startup-screen t)
#+end_src

** Frame title

I think we can make the frame look cooler
#+begin_src elisp
  (setq frame-title-format '("" "%b" " / Emacs"))
#+end_src

** No cursor in inactive windows

#+begin_src elisp
  (setq cursor-in-non-selected-windows nil)
#+end_src

** Set default modes
   
#+begin_src elisp
  (setq initial-major-mode 'text-mode)
  (setq default-major-mode 'text-mode)
#+end_src

** Font lock/type settings

Not really sure what these do but they seem fine?

#+begin_src elisp
  ;;Moderate font lock
  (setq font-lock-maximum-decoration nil)

  ;; No limit on font lock
  (setq font-lock-maximum-size nil)

  ;; No line break space points
  (setq auto-fill-mode nil)

  ;; Fill column at 80
  (setq fill-column 80)
#+end_src

** No confirmation for visiting files that dont exist

#+begin_src elisp
  (setq confirm-nonexistent-file-or-buffer nil)
#+end_src
 
** No tabs
   
#+begin_src elisp
  (setq-default indent-tabs-mode nil)
#+end_src
   
** Parens
#+begin_src elisp
  (show-paren-mode)
  (setq show-paren-style 'mixed)
  (electric-pair-mode 1)
#+end_src

** Don't ask me to kill
Pressing return feels pointless when killing a saved buffer (in my opinion). Lets make it so it doesn't ask me to confirm

#+begin_src elisp
(global-set-key (kbd "C-x k") 'kill-current-buffer)
#+end_src

** Column no.
#+begin_src elisp
  (column-number-mode 1)
#+end_src
* Global Packages

These are packages which fit into 2 categories
 + aren't a programming language
 + are used by other modes

** Org
Org is probably the best example of the main description. Some of the below is taken from the [[https://github.com/daviwil/emacs-from-scratch/blob/1a13fcf0dd6afb41fce71bf93c5571931999fed8/init.el][systemcrafters init.el]].

Define a function to use as a hook when we enter any org mode file.
#+begin_src elisp
  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode)) 
#+end_src

~use-package~ to setup our new org hook. We also demand org is loaded on boot to avoid error messages
#+begin_src elisp
  (use-package org
    :demand
    :hook (org-mode . efs/org-mode-setup)
    :custom
    ;;edit settings
    (org-auto-align-tags nil)
    (org-tags-column 0)
    (org-catch-invisible-edits 'show-and-error)
    (org-special-ctrl-a/e t)
    (org-special)
    ;;styling
    (org-ellipses " ◢")
    (org-hide-emphasis-markers t)
    (org-pretty-entities t)
    :custom-face
    (org-code ((nil :inherit highlight :font "Fantasque Sans Mono"))))
#+end_src

:DEPRECIATED:
Setup bullet points instead of =*=
#+begin_src elisp :tangle no
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("●" "▶" "■" "◎" "▷" "▣" "◈" "▪")))
#+end_src
:END:

*** Org-roam
Org roam is a rudimentary alternative to the paid for Roam research app. The gist is basically around Zettelkasen. Small notes combined together to create a graph of knowledge. 
#+begin_src elisp
  (use-package org-roam
    :demand 
    :custom
    (org-roam-directory "~/Roam")
    (org-roam-dailies-directory "diary/")
    (org-roam-node-display-template
     (concat "${title:*} "
             (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-dailies-capture-templates
      '(("d" "default" entry
         "* %?"
         :target (file+head "%<%Y-%m-%d>.org"
                            "#+title: %<%Y-%m-%d>\n"))))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ("C-c n j" . org-roam-dailies-capture-today))
    :hook
    (find-file . (lambda ()
                   (when (org-roam-file-p)
                     (rename-buffer (org-roam-db--file-title)))))
    :config
    (org-roam-db-autosync-mode))
#+end_src
*** Org-modern
A "gorgeous" sleek new org mode!!
#+begin_src elisp
  (use-package org-modern
    :after org
    :config
    (global-org-modern-mode))
#+end_src
** All the icons
:TODO: explore if I actually need this here or if it can move

Even though this is really an appearance we need it here for other loads
#+begin_src elisp
    (use-package all-the-icons
    :if (display-graphic-p))
    (use-package all-the-icons-dired
      :after all-the-icons
      :hook (dired-mode . all-the-icons-dired-mode))
#+end_src
** Dired
This just enables a single dired
#+begin_src elisp
  (put 'dired-find-alternate-file 'disabled nil)
#+end_src
** Projectile
Load projectile
#+begin_src elisp :tangle no
  (use-package projectile
    :custom
    (projectile-project-search-path '("~/Projects" ("~/Exercism/" . 2)))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :config
    (projectile-mode +1)
    ;; Create custom projectile project checks for ~swift~ packages
    (projectile-register-project-type 'swift '("Package.swift")
                                      :project-file "Package.swift"
                                      :compile "swift build"
                                      :test "swift test"
                                      :run "swift run"
                                      :test-suffix "Tests"))
#+end_src
** Autocomplete 
It took me a long time to find a completion I liked:
 + I didn't want to use Ido because I felt like I hadn't explored the other options
 + Ivy's setup was not intuitive enough and I didn't enjoy the minibuffer interaction
 + Helm had all the customisation but also broke *a lot* and was generally just annoying
 + Icomplete was simple but too minimalist
I am currently using the Selectrum, Maginalia and Orderless stack. I might use Consult & Embark but right now I don't need them.
The only thing I miss is that I want backspace to delete a whole directory so if you know how let me know.
I also dabbled in mini-frames for completion for my laptop but I'm also trying to use a real monitor for my "dev" work so it's less important.

*** Helm
#+begin_src elisp :tangle no
  (use-package helm-core)

  (use-package helm
    :requires helm-core
    :demand t
    :custom
    ;;(helm-display-header-line nil "remove 'hit C-j for hit1, hit2...' text")
    (helm-display-function 'helm-display-buffer-in-own-frame)
    (helm-allow-mouse 1 "use mouse in helm")
    (helm-mode-fuzzy-match t "fuzzy finding #1")
    (helm-completion-in-region-fuzzy-match t "fuzzy finding #2")
    (helm-display-buffer-reuse-frame t)
    :bind (("C-x b" . helm-buffers-list)
           ("M-x" . helm-M-x)
           ("C-x r b" . helm-bookmarks)
           ("C-x C-f" . helm-find-files)
           ("C-h a" . helm-apropos)
           ("M-y" . helm-show-kill-ring))
    :config
    (helm-mode 1))

  (use-package helm-projectile
    :requires projectile
    :config
    (helm-projectile-on))
#+end_src
*** Vertico
#+begin_src elisp :tangle no
  (use-package vertico
    :init
    (vertico-mode)
    ;; Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    (setq read-extended-command-predicate
          #'command-completion-default-include-p))
#+end_src

*** Selectrum
#+begin_src elisp
  (use-package selectrum
    :config
    (selectrum-mode +1))
#+end_src

*** Maginalia
#+begin_src elisp
  (use-package marginalia
    ;; Either bind `marginalia-cycle` globally or only in the minibuffer
    :bind (:map minibuffer-local-map
                ("M-A" . marginalia-cycle))

    ;; The :init configuration is always executed (Not lazy!)
    :init

    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))
#+end_src

*** Orderless
#+begin_src elisp
  (use-package orderless
    :custom
    (completion-styles '(orderless basic))    (completion-category-overrides '((file (styles basic partial-completion))))
    :config
    (savehist-mode))
#+end_src

*** Corfu
#+begin_src elisp
  (use-package corfu
    :demand
    ;; Optional customizations
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    (corfu-separator ?\s)          ;; Orderless field separator
    (corfu-quit-at-boundary t)     ;; quit at completion boundary
    (corfu-quit-no-match t)        ;; quit if there is no match
    (corfu-preview-current nil)    ;; Disable current candidate preview
    (corfu-preselect-first nil)    ;; Disable candidate preselection
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Use TAB for cycling, default is `corfu-complete'.
    :bind
    (:map corfu-map
          ("TAB" . corfu-next)
          ([tab] . corfu-next)
          ("S-TAB" . corfu-previous)
          ([backtab] . corfu-previous))

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.
    ;; This is recommended since Dabbrev can be used globally (M-/).
    ;; See also `corfu-excluded-modes'.
    :config
    (global-corfu-mode))
#+end_src

*** mini-frame
#+begin_src elisp
  (use-package mini-frame
    :custom
    (mini-frame-show-parameters '((top . 0.5)
                                  (width . 0.6)
                                  (left . 0.5)
                                  (height . 0.5)))
    (child-frame-border-width 20)
    :custom-face
    (child-frame-border ((nil :background "black")))
    (resize-mini-frames 1)
    :config
    ;(mini-frame-mode)
    )
#+end_src
** Avy
This is a god damn GAME CHANGER

#+begin_src elisp :tangle no
  (use-package avy
    :bind
    ("M-g c" . avy-goto-char)
    ("M-g t" . avy-goto-char-timer)
    ("M-g f" . avy-goto-line)
    ("M-g s" . avy-isearch))
#+end_src
** Magit
I have little experience with magit so. Watch this space.

#+begin_src elisp
  (use-package magit)
#+end_src

** Iedit

#+begin_src elisp
    (use-package iedit
      :init
      (defun tr/iedit ()
        "Run regular iedit unless in LSP mode, then use LSP iedit"
        (interactive)
        (if lsp-mode
            (lsp-iedit-highlights)
          (iedit-mode)))
      :bind (("C-;" . tr/iedit)))
#+end_src

** Multiple Cursors
I like the rectangle mode in emacs, but I do miss multiple cursors in the way they function like in vscode. This package doesnt really to this, but it'll do.

#+begin_src elisp :tangle no
  (use-package multiple-cursors
    :bind (("C-." . 'mc/mark-next-like-this)
           ("C->" . 'mc/mark-previous-like-this)
           ("C-M-." . 'mc/mark-all-like-this)))
#+end_src
 
** Yasnippet
:TODO: This one requires a lot more setup than previous ones. Most likely a bigger task.
First lets load the main package, and then a few supplementary snippet packages

#+begin_src elisp
  (use-package yasnippet
    :config
    (yas-global-mode 1))
#+end_src

*** Haskell
#+begin_src elisp
    (use-package haskell-snippets
      :after yasnippet)
#+end_src

** Expand Region
This package makes it so that you incrementally expand your marker based on what is currently selected.
ie ~test("abc efg")~. If had our cursor on the ~c~ in ~abc~ then it would expand by first selecting ~abc~, then ~abc efg~, then ~"abc efg"~ then ~("abc efg")~, finally ~test("abc efg")~.

#+begin_src elisp
  (use-package expand-region
    :bind ("C--" . er/expand-region))
#+end_src

** Dashboard
#+begin_src elisp
  (use-package dashboard
    :config
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-center-content t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-init-info t)
    (setq dashboard-set-navigator t)
    (dashboard-setup-startup-hook))
#+end_src

* Programming Language
** LSP

/“Rabbit's clever,"/ said Pooh thoughtfully.
/"Yes,"/ said Piglet, /"Rabbit's clever."/
/"And he has Brain."/
/"Yes,"/ said Piglet, /"Rabbit has Brain."/
There was a long silence.
/"I suppose,"/ said Pooh, /"that that's why he never understands anything.”/

*** Eglot
I have eglot /just in case/ but I'm not a fan of it's invasion of the minbuffer. Plus LSP-mode w/ LSP-UI gives me a full IDE experience out of the box and additonal mouse support (which is nice)

#+begin_src elisp
  (use-package eglot)
#+end_src

*** LSP-mode
I used this before and it was awful to setup, now it just kind of worked which is bizarre.

#+begin_src elisp
  (use-package lsp-mode
    :custom
    (lsp-keymap-prefix "C-c l")
    (lsp-completion-provider :none) ;; use default (i.e corfu)
    :init
    (defun tr/lsp-mode-setup-completion ()
      (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
            '(orderless))) ;;use orderless
    :config
    (lsp-headerline-breadcrumb-mode -1)
    :hook
    (lsp-completion-mode . tr/lsp-mode-setup-completion)
    (haskell-mode . lsp-deferred)
    (c-mode . lsp-deferred)
    :commands lsp)
  (use-package lsp-ui :commands lsp-ui-mode)
#+end_src
** Flycheck
#+begin_src elisp
  (use-package flycheck
    :init (global-flycheck-mode))
#+end_src
** Haskell Mode

My favourite language *deserves* it's own mode

#+begin_src elisp
  (use-package haskell-mode
    :custom
    (haskell-font-lock-symbols-alist '(("\\" . "λ")))
    (haskell-font-lock-symbols t))

  (use-package lsp-haskell
    :after lsp-mode
    :hook
    (haskell-mode . lsp)
    (haskell-literate-mode . lsp))
#+end_src

** Julia Mode
** Racket
#+begin_src elisp
  (use-package racket-mode
    :config
    (setq racket-program "/Applications/Racket v8.3/bin/racket"))
#+end_src
** Swift
Swift dev really should be done in xcode but I love emacs too much.
#+begin_src elisp
    (use-package swift-mode)
#+end_src
** Cooklang
Not a real programing language but fuck it
#+begin_src elisp
    (use-package cook-mode
      :load-path "elisp/cook-mode/")
#+end_src
* Appearance
** Auto-dark
*** Themes
#+begin_src elisp
          (use-package material-theme)
          (use-package one-themes)
          (use-package rainbow-mode)
          (use-package gruber-darker-theme)
          (use-package modus-themes)
          (use-package solo-jazz-theme
            :load-path "elisp/solo-jazz-emacs-theme/"
            :init
            (add-to-list 'custom-theme-load-path "elisp/solo-jazz-emacs-theme/"))
          (use-package tron-legacy-theme)
          (use-package chocolate-theme)
#+end_src
*** Config

I've started to learn to love a light mode, especially during the day when I have lots of bright sunlight in my room. There's a neat ol' package called =auto-dark= which does it based off the MacOS theme. This is good because it means if I change my mind and just want dark mode /it just works/

#+begin_src elisp
  (use-package auto-dark
    :after one-themes
    :config
    (setq auto-dark--allow-osascript t)
    (setq auto-dark--dark-theme 'gruber-darker)
    (setq auto-dark--light-theme 'solo-jazz))
#+end_src
** Fonts
#+begin_src elisp
  (defun tr/set-fonts ()
    (interactive)
    (set-face-attribute 'default nil
                        :family "Fantasque Sans Mono" :height 180)
    ;; (set-face-attribute 'italic nil
    ;;                     :family "Victor Mono" :slant 'italic :weight 'semibold :height 155)
    (set-face-attribute 'fixed-pitch nil
                        :family "Fantasque Sans Mono")
    (set-face-attribute 'variable-pitch nil
                        :family "SF Pro"))
  (tr/set-fonts)
  ;;ligatures
  (if (fboundp 'mac-auto-operator-composition-mode) (mac-auto-operator-composition-mode)) 
#+end_src
** Other
*** Menu/tool/scroll bar
Controversially I use =menu-bar-mode= because it works a lot better on the MacOS port of emacs. However I dont use =tool-bar-mode= nor =scroll-bar-mode= so these can go.

#+begin_src elisp
  (menu-bar-mode 1)
  (tool-bar-mode -1)
  (set-scroll-bar-mode nil)
#+end_src
*** Line wrapping
#+begin_src elisp
  (global-visual-line-mode 1)
#+end_src
*** Line numbers
Line numbers are obviously a must, but I'm also partial to /not/ having them sometimes. Like in org mode where they kinda make it more confusing. So lets only enable them for /some/ packages. The below is basically copied verbatim from [[https://www.emacswiki.org/emacs/LineNumbers#h5o-1][emacs wiki]].

#+begin_src elisp
    (use-package display-line-numbers
      :init
      (defcustom display-line-numbers-exempt-modes
        '(vterm-mode eshell-mode shell-mode term-mode ansi-term-mode org-mode text-mode markdown-mode package-menu-mode racket-repl-mode eww-mode)
        "Major modes on which to disable line numbers."
        :group 'display-line-numbers
        :type 'list
        :version "green")
      :config
      (setq display-line-numbers 'relative)   
      (defun display-line-numbers--turn-on ()
        "Turn on line numbers except for certain major modes.
  Exempt major modes are defined in `display-line-numbers-exempt-modes'."
        (unless (or (minibufferp)
                    (member major-mode display-line-numbers-exempt-modes))
          (display-line-numbers-mode)))
      (global-display-line-numbers-mode))
#+end_src
** Mode-line
*** Minions
#+begin_src elisp tangle: yes
      (use-package minions
        :config
        (minions-mode)
        :custom
        (minions-mode-line-lighter ""))
#+end_src
*** Delight
#+begin_src elisp tangle: no
  (use-package delight)
#+end_src
*** Doom-modeline
#+begin_src elisp
  (use-package doom-modeline
  :ensure t
  :custom
  (doom-modeline-height 15 "height")
  (doom-modeline-minor-modes t "show minor modes")
  :init (doom-modeline-mode 1))
#+end_src
