#+TITLE: Tom's Emacs Config
#+AUTHOR: Tom Ratford
#+PROPERTY: header-args :comments link :tangle ~/.emacs.d/init.el :tangle-mode (identity #o444)
#+STARTUP: overview

:TODO: migrate to straight to improve reproducability

* Basic Settings

These are the basic settings which I want active for all of my emacs. Firstly we obviously need MELPA and use-package.

#+begin_src elisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

  (package-initialize)
#+end_src

Now we bootstrap =use-package= and load it. =use-package-always-ensure t= Ensures we always have every package installed when we load it.

#+begin_src elisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))

  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src

Now we can dance.

** Customfile

Not a fan of customise variable, it clogs up and makes your init.el look awful.
let it be gone (or hidden).
Whilst we're here lets just make all themes safe ever (I only load 2 anyways)

#+begin_src elisp
  (setq custom-file "~/.emacs.d/custom.el")
  (setq custom-safe-themes t)
#+end_src

** Autosaving

Lets put backups and auto-saves somewhere smart.

#+begin_src elisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+end_src

** Replace =yes/no= with =y/n=
#+begin_src elisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Delete selection upon type
#+begin_src elisp
  (delete-selection-mode)
#+end_src

** Startup messages

I'm going to replace the startup screens with =dashboard.el,= so this is irrelevant

#+begin_src elisp
  (setq ihibit-startup-screen t)
#+end_src

** No cursor in inactive windows
Makes it easier to tell if you are in a window or not
#+begin_src elisp
  (setq cursor-in-non-selected-windows nil)
#+end_src

** Set default modes

Set modes to text mode instead of fundamental mode(?)
#+begin_src elisp
  (setq initial-major-mode 'text-mode)
  (setq default-major-mode 'text-mode)
#+end_src

** No confirmation for visiting files that dont exist

Means you can go to a file that doesn't exist and just press C-x C-s to make it
#+begin_src elisp
  (setq confirm-nonexistent-file-or-buffer nil)
#+end_src

** No tabs

#+begin_src elisp
  (setq-default indent-tabs-mode nil)
#+end_src
*** Tab widths
Just on the off chance (looking at you ~go~)
#+begin_src elisp
  (setq-default tab-width 4)
#+end_src

** Parens
this highlights the other parentheses/brace etc...
#+begin_src elisp
  (show-paren-mode)
  (setq show-paren-style 'mixed)
  (electric-pair-mode 1)
#+end_src

** Don't ask me to kill
Pressing return feels pointless when killing a saved buffer (in my opinion).

#+begin_src elisp
(global-set-key (kbd "C-x k") 'kill-current-buffer)
#+end_src

** Column no.
#+begin_src elisp
  (column-number-mode 1)
#+end_src
* Global Packages

These are packages which fit into 2 categories
 + aren't a programming language
 + are used by any/all programming languages

** Org
Org is probably the best example of the main description. Some of the below is taken from the [[https://github.com/daviwil/emacs-from-scratch/blob/1a13fcf0dd6afb41fce71bf93c5571931999fed8/init.el][systemcrafters init.el]].

Define a function to use as a hook when we enter any org mode file.
#+begin_src elisp
  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode)
    ;; latex options
    (setq org-format-latex-options (plist-put org-format-latex-options :scale 0.6))
    )
#+end_src

~use-package~ to setup our new org hook. We also demand org is loaded on boot to avoid error messages
#+begin_src elisp
  (use-package org
    :demand
    :hook (org-mode . efs/org-mode-setup)
    :custom
    ;;edit settings
    (org-auto-align-tags nil)
    (org-tags-column 0)
    (org-catch-invisible-edits 'show-and-error)
    (org-special-ctrl-a/e t)
    (org-special)
    ;;styling
    (org-ellipses " â—¢")
    (org-hide-emphasis-markers t)
    (org-pretty-entities t)
    :custom-face
    ;;(org-code ((nil :inherit highlight :font "Fantasque Sans Mono")))
    (org-table ((t :font "Fantasque Sans Mono"))))
#+end_src

** All the icons
Even though this is really an appearance we need it here for other loads
#+begin_src elisp
    (use-package all-the-icons
    :if (display-graphic-p))
    (use-package all-the-icons-dired
      :after all-the-icons
      :hook (dired-mode . all-the-icons-dired-mode))
#+end_src
** Dired
This just enables a single dired buffer
#+begin_src elisp
  (put 'dired-find-alternate-file 'disabled nil)
#+end_src
** Autocomplete
It took me a long time to find a completion I liked:
 + I didn't want to use Ido because I felt like I hadn't explored the other options
 + Ivy's setup was not intuitive enough and I didn't enjoy the minibuffer interaction
 + Helm had all the customisation but also broke *a lot* and was generally just annoying
 + Icomplete was simple but too minimalist
I am currently using the Selectrum, Maginalia and Orderless stack. I might use Consult & Embark but right now I don't need them.
The only thing I miss is that I want backspace to delete a whole directory so if you know how let me know.
I also dabbled in mini-frames for completion for my laptop but I'm also trying to use a real monitor for my "dev" work so it's less important.

*** Vertico
#+begin_src elisp :tangle no
  (use-package vertico
    :init
    (vertico-mode)
    ;; Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    (setq read-extended-command-predicate
          #'command-completion-default-include-p))
#+end_src

*** Selectrum
#+begin_src elisp
  (use-package selectrum
    :config
    (selectrum-mode +1))
#+end_src

*** Maginalia
#+begin_src elisp
  (use-package marginalia
    ;; Either bind `marginalia-cycle` globally or only in the minibuffer
    :bind (:map minibuffer-local-map
                ("M-A" . marginalia-cycle))

    ;; The :init configuration is always executed (Not lazy!)
    :init

    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))
#+end_src

*** Orderless
#+begin_src elisp
  (use-package orderless
    :demand
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion))
                                     (eglot (styles . (orderless flex)))))
    :config
    (savehist-mode))
#+end_src

*** Corfu
#+begin_src elisp
  (use-package corfu
    :demand
    ;; Optional customizations
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    (corfu-separator ?\s)          ;; Orderless field separator
    (corfu-quit-at-boundary t)     ;; quit at completion boundary
    (corfu-quit-no-match t)        ;; quit if there is no match
    (corfu-preview-current nil)    ;; Disable current candidate preview
    (corfu-preselect-first nil)    ;; Disable candidate preselection
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Use TAB for cycling, default is `corfu-complete'.
    :bind
    (:map corfu-map
          ("TAB" . corfu-next)
          ([tab] . corfu-next)
          ("S-TAB" . corfu-previous)
          ([backtab] . corfu-previous))

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.
    ;; This is recommended since Dabbrev can be used globally (M-/).
    ;; See also `corfu-excluded-modes'.
    :config
    (global-corfu-mode))
#+end_src

** Magit
=magit= is a _really_ good git interface in emacs.
#+begin_src elisp
  (use-package magit)
#+end_src

** Iedit

#+begin_src elisp
    (use-package iedit)
#+end_src

** Multiple Cursors
I like the rectangle mode in emacs, but I do miss multiple cursors in the way they function like in vscode. This package doesnt really to this, but it'll do.

#+begin_src elisp
  (use-package multiple-cursors
    :bind (("C-." . 'mc/mark-next-like-this)
           ("C->" . 'mc/mark-previous-like-this)
           ("C-M-." . 'mc/mark-all-like-this)))
#+end_src

** Yasnippet
:TODO: This one requires a lot more setup than previous ones. Most likely a bigger task.
First lets load the main package, and then a few supplementary snippet packages

#+begin_src elisp
  (use-package yasnippet
    :config
    (yas-global-mode 1))
#+end_src

*** Haskell
#+begin_src elisp
    (use-package haskell-snippets
      :after yasnippet)
#+end_src

** Expand Region
This package makes it so that you incrementally expand your marker based on what is currently selected.
ie ~test("abc efg")~. If had our cursor on the ~c~ in ~abc~ then it would expand by first selecting ~abc~, then ~abc efg~, then ~"abc efg"~ then ~("abc efg")~, finally ~test("abc efg")~.

#+begin_src elisp
  (use-package expand-region
    :bind ("C--" . er/expand-region))
#+end_src
** Dashboard
#+begin_src elisp
    (defun read-lines (filePath)
      "Return a list of lines of a file at filePath."
      (with-temp-buffer
        (insert-file-contents filePath)
        (split-string (buffer-string) "\n" t)))

    (use-package dashboard
      :custom
      (dashboard-startup-banner 'logo "Use the purple emacs logo")
      (dashboard-center-content t "Self explanatory")
      (dashboard-set-heading-icons t "Show icons for each subsection")
      (dashboard-set-file-icons t "Show icons for each file type")
      (dashboard-set-init-info t "Show how quick startup was/is")
      (dashboard-projects-backend 'project-el)
      (dashboard-items '((recents . 10)
                         (projects . 10)))
      (dashboard-footer-icon (all-the-icons-octicon "quote"
                                                    :height 1.1
                                                    :v-adjust -0.05
                                                    :face 'font-lock-keyword-face))
;;TODO: find a way to include an external file, but at tangle time instead of relying on another file      
  ;;    (dashboard-footer-messages '("")
    :config
    (dashboard-setup-startup-hook))
#+end_src
** EAF
Emacs application framework - Will require straight.el
** Org-auto-tangle
Because I'm forgetful
#+begin_src elisp
  (use-package org-auto-tangle
    :after org
    :custom
    (org-auto-tangle-default t)
    :hook (org-mode . org-auto-tangle-mode))
#+end_src
** Vterm
To basically make emacs my tmux/screen equivalent.
#+begin_src elisp
  (use-package vterm
    :ensure t
    :custom
    (vterm-shell "/opt/homebrew/bin/fish"))
#+end_src
** Ispell/flyspell
Using [[http://hunspell.github.io][hunspell]] and an english dictionary you have to download from [[https://github.com/wooorm/dictionaries/tree/main/dictionaries/en-GB][this github]].
#+begin_src elisp
  (use-package ispell
    :custom
    (ispell-program-name "hunspell")
    (ispell-dictionary "en_GB"))
#+end_src
** doc-view
doc-view is for viewing pdf files, which is linked to my latex setup.
I really only need to change the one thing to make it continuous (so when I view PDFs I can scroll easily)
#+begin_src elisp
  (use-package doc-view
    :custom (doc-view-continuous t))
#+end_src
** Flycheck
Used by eglot amongst other things. A generic package
#+begin_src elisp :tangle no
  (use-package flycheck
    :init (global-flycheck-mode))
#+end_src
* Programming Language
** LSP
*** Eglot
eglot is base emacs and just works. It gives me everything I could need with respect to a lsp client and integrates nicely with base emacs.
#+begin_src elisp
  (use-package eglot)
#+end_src

** Haskell Mode
#+begin_src elisp
  (use-package haskell-mode
    :custom
    (haskell-font-lock-symbols-alist '(("\\" . "Î»")))
    (haskell-font-lock-symbols t))
    ;;:hook
    ;;(haskell-mode . (haskell-indent-mode interactive-haskell-mode)))

  ;;(use-package lsp-haskell
  ;;  :after lsp-mode
  ;;  :hook
  ;;  (haskell-mode . lsp)
  ;;  (haskell-literate-mode . lsp))
#+end_src

** Julia Mode
#+begin_src elisp
  (use-package julia-mode)
#+end_src
** Racket
#+begin_src elisp
  (use-package racket-mode)
  ;;  :config (require 'lsp-racket))
#+end_src
** Swift
Swift dev really should be done in xcode but I love emacs too much.
#+begin_src elisp
    (use-package swift-mode)
#+end_src
** C
:c-mode:
I don't actually need any extra packages for C yet but I want to set the compile command (if I do not have a makefile setup).
#+begin_src elisp
  (require 'compile)
  (add-hook 'c-mode-hook
            (lambda ()
              (unless (file-exists-p "Makefile")
                (let ((file (file-name-nondirectory buffer-file-name)))
                  (setq-local compile-command
                              ;; clang -Wall -lm -o NAME NAME.c
                              (format "clang -Wall -lm -o %s %s"
                                      (file-name-sans-extension file)
                                      file))))
              (hs-minor-mode)))
 #+end_src
** Java
TBD for Crafting interpreters
** Go
Pokemon /go/ to the polls
#+begin_src elisp
    (use-package go-mode
      :config
      (add-to-list 'exec-path "~/go/bin")
      :hook ((go-mode . hs-minor-mode)
             (go-mode . subword-mode)
             (go-mode . auto-revert-mode)))
#+end_src
** Rust
#+begin_src elisp
  (use-package rust-mode
    :config
    (add-to-list 'exec-path "~/.cargo/bin"))
#+end_src
** Nix
#+begin_src elisp
  (use-package nix-mode
    :mode "\\.nix\\'")
#+end_src
** Typescript
Setup web mode
#+begin_src elisp
  (use-package typescript-mode
    :mode ("\\.tsx?\\'" . typescript-mode)
    :custom
    (typescript-indent-level 2))

  ;; ensure nice compilation messages
  (require 'ansi-color)
  (defun colorize-compilation-buffer ()
    (ansi-color-apply-on-region compilation-filter-start (point-max)))
  (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
#+end_src
Typescript interactive development environment 
#+begin_src elisp tangle: no
  (use-package tide
    :after (web-mode typescript-mode)
    :hook ((typescript-mode . tide-setup)
           (typescript-mode . tide-hl-identifier-mode)
           (before-save . tide-format-before-save)))
#+end_src
*** Jade mode (pug)
Used for creating HTML templates
#+begin_src elisp
  (use-package jade-mode)
#+end_src
** Svelte
#+begin_src elisp
  (use-package svelte-mode)
#+end_src
** Python
#+begin_src elisp
  (use-package python
    :interpreter ("python3" . python-mode)) ;; Stops using macos' built in python 2.7
#+end_src
** Clojure
#+begin_src elisp
  (use-package clojure-mode)
#+end_src
** TeX
#+begin_src elisp
  (use-package tex
    :ensure auctex
    :custom
    (TeX-auto-save t)
    (TeX-parse-self t)
    )
#+end_src
** R
Succumbing to peer pressure
#+begin_src elisp
  (use-package ess)
#+end_src
* Appearance
** Auto-dark
*** Themes
#+begin_src elisp
          (use-package material-theme)
          (use-package one-themes)
          (use-package rainbow-mode)
          (use-package gruber-darker-theme)
          (use-package modus-themes)
          (use-package solo-jazz-theme
            :load-path "elisp/solo-jazz-emacs-theme/"
            :init
            (add-to-list 'custom-theme-load-path "elisp/solo-jazz-emacs-theme/"))
          (use-package tron-legacy-theme)
          (use-package chocolate-theme)
#+end_src
*** Config

I've started to learn to love a light mode, especially during the day when I have lots of bright sunlight in my room. There's a neat ol' package called =auto-dark= which does it based off the MacOS theme. This is good because it means if I change my mind and just want dark mode /it just works/

#+begin_src elisp
  (use-package auto-dark
    :after one-themes
    :config
    (setq auto-dark--allow-osascript t)
    (setq auto-dark--dark-theme 'gruber-darker)
    (setq auto-dark--light-theme 'solo-jazz))
#+end_src
** Fonts
#+begin_src elisp
  (defun tr/set-fonts ()
    (interactive)
    (set-face-attribute 'default nil
                        :family "Fantasque Sans Mono" :height 180)
    ;; (set-face-attribute 'italic nil
    ;;                     :family "Victor Mono" :slant 'italic :weight 'semibold :height 155)
    (set-face-attribute 'fixed-pitch nil
                        :family "Fantasque Sans Mono")
    (set-face-attribute 'variable-pitch nil
                        :family "SF Pro"))
  (tr/set-fonts)
  ;;ligatures
  (if (fboundp 'mac-auto-operator-composition-mode) (mac-auto-operator-composition-mode))
#+end_src
** Defaults
*** Menu/tool/scroll bar
Controversially I use =menu-bar-mode= because it works a lot better on the Mitsuharu MacOS port of emacs. However I dont use =tool-bar-mode= nor =scroll-bar-mode= so these can go.

#+begin_src elisp
  (menu-bar-mode 1)
  (tool-bar-mode -1)
  (set-scroll-bar-mode nil)
#+end_src
*** Line wrapping
#+begin_src elisp
  (global-visual-line-mode 1)
#+end_src
*** Line numbers
Line numbers are obviously a must, but I'm also partial to /not/ having them sometimes. Like in org mode where they kinda make it more confusing. So lets only enable them for /some/ packages. The below is basically copied verbatim from [[https://www.emacswiki.org/emacs/LineNumbers#h5o-1][emacs wiki]].

#+begin_src elisp
    (use-package display-line-numbers
      :init
      (defcustom display-line-numbers-exempt-modes
        '(vterm-mode eshell-mode shell-mode term-mode ansi-term-mode org-mode text-mode markdown-mode package-menu-mode racket-repl-mode eww-mode doc-view-mode)
        "Major modes on which to disable line numbers."
        :group 'display-line-numbers
        :type 'list
        :version "green")
      :config
      (setq display-line-numbers 'relative)
      (defun display-line-numbers--turn-on ()
        "Turn on line numbers except for certain major modes.
  Exempt major modes are defined in `display-line-numbers-exempt-modes'."
        (unless (or (minibufferp)
                    (member major-mode display-line-numbers-exempt-modes))
          (display-line-numbers-mode)))
      (global-display-line-numbers-mode))
#+end_src
** Mode-line
*** Minions
#+begin_src elisp
      (use-package minions
        :config
        (minions-mode))
#+end_src
*** Doom-modeline
#+begin_src elisp
  (use-package doom-modeline
  :ensure t
  :custom
  (doom-modeline-height 15 "height")
  (doom-modeline-minor-modes t "show minor modes")
  ;; display time in modeline, not a doom-modeline feature
  (display-time-format "%R") ;; equivalent %H:%M
  (display-time-default-load-average nil)
  :init
  (doom-modeline-mode 1)
  ;; display time in modeline, not a doom-modeline feature
  (display-time-mode 1))
#+end_src
** Rename frame title

#+begin_src elisp
  (setq frame-title-format '("" "%b" " / Emacs"))
#+end_src

